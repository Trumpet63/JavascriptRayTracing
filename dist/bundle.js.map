{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["let xSlider = <HTMLInputElement> document.getElementById(\"xInput\");\r\nxSlider.addEventListener(\"input\", () => {circles[0].center[0] = parseFloat(xSlider.value)});\r\nlet ySlider = <HTMLInputElement> document.getElementById(\"yInput\");\r\nySlider.addEventListener(\"input\", () => {circles[0].center[1] = parseFloat(ySlider.value)});\r\nlet zSlider = <HTMLInputElement> document.getElementById(\"zInput\");\r\nzSlider.addEventListener(\"input\", () => {circles[0].center[2] = parseFloat(zSlider.value)});\r\n\r\nlet fpsCounter = <HTMLDivElement> document.getElementById(\"fpsCounter\");\r\nlet previousTimeMillis: number;\r\n\r\nlet width = 1000;\r\nlet height = 600;\r\n\r\nlet canvas = <HTMLCanvasElement> document.getElementById(\"mainCanvas\");\r\ncanvas.width = width;\r\ncanvas.height = height;\r\nlet ctx = canvas.getContext(\"2d\");\r\n\r\n// https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Pixel_manipulation_with_canvas\r\nlet imageData = ctx.createImageData(width, height);\r\n\r\nlet yOne = height / width;\r\nlet x1: Vector3 = [0, yOne, 0];\r\nlet x2: Vector3 = [1, yOne, 0];\r\nlet x3: Vector3 = [0, 0, 0];\r\nlet x4: Vector3 = [1, 0, 0];\r\nlet camera: Vector3 = [0.5, yOne/2, -1];\r\n\r\ninterface Circle {\r\n    index: number;\r\n    ambient: {r: number, g: number, b: number};\r\n    diffuse: number;\r\n    specular: number;\r\n    shine: number;\r\n    center: Vector3;\r\n    radius: number;\r\n}\r\nlet circles: Circle[] = [\r\n    {index: 0, ambient: {r: 1, g: 0, b: 0}, diffuse: 0.7, specular: 0.5, shine: 15, center: <Vector3> [0.5, yOne/2, 1.9], radius: 0.5},\r\n    {index: 1, ambient: {r: 0, g: 1, b: 0}, diffuse: 0.7, specular: 0.5, shine: 15, center: <Vector3> [0.1, 0.8, 1.6], radius: 0.3},\r\n    {index: 2, ambient: {r: 0, g: 0, b: 1}, diffuse: 0.7, specular: 0.5, shine: 15, center: <Vector3> [0.9, 0, 1.8], radius: 0.1},\r\n];\r\nySlider.value = circles[0].center[1].toString();\r\n\r\nlet lights = [\r\n    {center: <Vector3> [6, 2, 1], diffuse: {r: 0.5, g: 0.5, b: 0.5}, specular: {r: 0.5, g: 0.5, b: 0.5}},\r\n    {center: <Vector3> [-2, 2, 0], diffuse: {r: 0.2, g: 0.2, b: 0.2}, specular: {r: 0.2, g: 0.2, b: 0.2}},\r\n]\r\n\r\nlet ambientLight = {r: 0.2, g: 0.2, b: 0.2};\r\n\r\ninterface Vector {\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n}\r\n\r\ntype Vector3 = [number, number, number];\r\n\r\nfunction scaleInPlace3(dest: Vector3, vector: Vector3, scalar: number) {\r\n    dest[0] = scalar * vector[0];\r\n    dest[1] = scalar * vector[1];\r\n    dest[2] = scalar * vector[2];\r\n}\r\n\r\nfunction addInPlace3(dest: Vector3, v1: Vector3, v2: Vector3): void {\r\n    dest[0] = v1[0] + v2[0];\r\n    dest[1] = v1[1] + v2[1];\r\n    dest[2] = v1[2] + v2[2];\r\n}\r\n\r\nfunction subtractInPlace3(dest: Vector3, v1: Vector3, v2: Vector3): void {\r\n    dest[0] = v1[0] - v2[0];\r\n    dest[1] = v1[1] - v2[1];\r\n    dest[2] = v1[2] - v2[2];\r\n}\r\n\r\nfunction product3(v1: Vector3, v2: Vector3): number {\r\n    return v1[0]*v2[0] + v1[1]*v2[1] + v1[2]*v2[2];\r\n}\r\n\r\nfunction normalizeInPlace(v: Vector3): void {\r\n    let scalar = 1 / Math.sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);\r\n    v[0] *= scalar;\r\n    v[1] *= scalar;\r\n    v[2] *= scalar;\r\n}\r\n\r\nlet intersect3Temp: Vector3 = [0, 0, 0];\r\nfunction intersect3(point: Vector3, direction: Vector3, circle: {center: Vector3, radius: number}) {\r\n    let center = circle.center;\r\n    let r = circle.radius;\r\n    let d = direction\r\n    let o = point;\r\n    \r\n    // compute quadratic coefficients\r\n    intersect3Temp[0] = o[0] - center[0];\r\n    intersect3Temp[1] = o[1] - center[1];\r\n    intersect3Temp[2] = o[2] - center[2];\r\n    let a = product3(d, d);\r\n    let b = 2 * product3(intersect3Temp, d);\r\n    let c = product3(intersect3Temp, intersect3Temp) - r * r;\r\n\r\n    let discriminant = b*b - 4*a*c;\r\n    if (discriminant < 0) {\r\n        return undefined;\r\n    }\r\n    let toAdd = Math.sqrt(discriminant);\r\n    let t1 = (-b - toAdd) / (2 * a);\r\n    let t2 = (-b + toAdd) / (2 * a); // we know t2 is greater than t1\r\n    let t = t1 < 1 ? t2 : t1;\r\n    return t;\r\n}\r\n\r\nfunction roundToNPlaces(x: number, numPlaces: number): number {\r\n    let scale: number = Math.pow(10, numPlaces);\r\n    return Math.round(x * scale) / scale;\r\n}\r\n\r\ninterface Ray {\r\n    pixel: {i: number, j: number};\r\n    direction: Vector3;\r\n}\r\nlet rays: Ray[] = [];\r\nlet numPixels = width * height;\r\nfor (let i = 0; i < numPixels; i++) {\r\n    rays.push({pixel: {i: -1, j: -1}, direction: [0, 0, 0]});\r\n}\r\n\r\ninterface Intersection {\r\n    circle: Circle;\r\n    t: number;\r\n}\r\nlet intersections: {ray: Ray, closestIntersection: Intersection}[] = [];\r\nlet numIntersections = 0;\r\nfor (let i = 0; i < numPixels; i++) {\r\n    intersections.push({ray: rays[0], closestIntersection: {circle: circles[0], t: 0}});\r\n}\r\n\r\nlet block1Time: string;\r\nlet block2Time: string;\r\nlet block3Time: string;\r\n\r\nlet normal: Vector3 = [0, 0, 0];\r\nlet pointOfIntersection: Vector3 = [0, 0, 0];\r\nlet lightDirection: Vector3 = [0, 0, 0];\r\nlet shadowDirection: Vector3 = [0, 0, 0];\r\nlet reflection: Vector3 = [0, 0, 0];\r\nlet viewDirection: Vector3 = [0, 0, 0];\r\n\r\nwindow.requestAnimationFrame(draw);\r\nfunction draw(currentTimeMillis: number) {\r\n    let fps = 1000 / (currentTimeMillis - previousTimeMillis);\r\n    if (!isNaN(fps)) {\r\n        fpsCounter.innerText = \"FPS: \" + roundToNPlaces(fps, 2);\r\n    }\r\n\r\n    // fill all pixels with black\r\n    for (let i = 0; i < width*height; i++) {\r\n        imageData.data[4*i] = 0;\r\n        imageData.data[4*i+1] = 0;\r\n        imageData.data[4*i+2] = 0;\r\n        imageData.data[4*i+3] = 255;\r\n    }\r\n\r\n    let prevTime = performance.now();\r\n    let tempTime = 0;\r\n\r\n    let hIncrement = 1 / width;\r\n    let vIncrement = 1 / height;\r\n    let horizontal = hIncrement/2;\r\n    for (let i = 0; i < width; i++) {\r\n        let vertical = vIncrement/2;\r\n        for (let j = 0; j < height; j++) {\r\n            // t1[0] = (1-horizontal) * x1[0] + horizontal * x2[0]\r\n            // t2[0] = (1-horizontal) * x3[0] + horizontal * x4[0]\r\n            // p[0] = (1-vertical) * t1[0] + vertical * t2[0]\r\n            // direction[0] = p[0] - camera[0]\r\n\r\n            let rayIndex = i * height + j;\r\n            rays[rayIndex].pixel.i = i;\r\n            rays[rayIndex].pixel.j = j;\r\n            rays[rayIndex].direction[0] = (1-vertical) * ( (1-horizontal) * x1[0] + horizontal * x2[0] ) + vertical * ( (1-horizontal) * x3[0] + horizontal * x4[0] ) - camera[0];\r\n            rays[rayIndex].direction[1] = (1-vertical) * ( (1-horizontal) * x1[1] + horizontal * x2[1] ) + vertical * ( (1-horizontal) * x3[1] + horizontal * x4[1] ) - camera[1];\r\n            rays[rayIndex].direction[2] = (1-vertical) * ( (1-horizontal) * x1[2] ) + vertical * ( (1-horizontal) * x3[2] + horizontal * x4[2] ) - camera[2];\r\n            vertical += vIncrement;\r\n        }\r\n        horizontal += hIncrement;\r\n    }\r\n    tempTime = performance.now();\r\n    block1Time = roundToNPlaces(tempTime - prevTime, 3).toString();\r\n    prevTime = tempTime;\r\n\r\n    numIntersections = 0;\r\n    for (let k = 0; k < rays.length; k++) {\r\n        let closestIntersection;\r\n        let d = rays[k].direction;\r\n        for (let n = 0; n < circles.length; n++) {\r\n            let circle = circles[n];\r\n            let t = intersect3(camera, d, circle);\r\n\r\n            if (t === undefined || t < 1) {\r\n                continue; // the intersection occured between the camera and the view plane\r\n            }\r\n\r\n            let intersection = {circle: circle, t: t};\r\n            if (closestIntersection === undefined\r\n                || closestIntersection.t > intersection.t\r\n            ) {\r\n                closestIntersection = intersection;\r\n            }\r\n        }\r\n        if (closestIntersection !== undefined) {\r\n            intersections[numIntersections].ray = rays[k]\r\n            intersections[numIntersections].closestIntersection = closestIntersection;\r\n            numIntersections++;\r\n        }\r\n    }\r\n    tempTime = performance.now();\r\n    block2Time = roundToNPlaces(tempTime - prevTime, 3).toString();\r\n    prevTime = tempTime;\r\n\r\n    for (let k = 0; k < numIntersections; k++) {\r\n        let i = intersections[k].ray.pixel.i;\r\n        let j = intersections[k].ray.pixel.j;\r\n        let closest = intersections[k].closestIntersection;\r\n        let circle = closest.circle;\r\n        let rayDirection = intersections[k].ray.direction;\r\n\r\n        scaleInPlace3(pointOfIntersection, rayDirection, closest.t);\r\n        addInPlace3(pointOfIntersection, camera, pointOfIntersection);\r\n\r\n        subtractInPlace3(normal, pointOfIntersection, circle.center);\r\n        normalizeInPlace(normal);\r\n\r\n        let rAmbient = circle.ambient.r * ambientLight.r;\r\n        let gAmbient = circle.ambient.g * ambientLight.g;\r\n        let bAmbient = circle.ambient.b * ambientLight.b;\r\n\r\n        let rDiffuse = 0;\r\n        let gDiffuse = 0;\r\n        let bDiffuse = 0;\r\n        let rSpecular = 0;\r\n        let gSpecular = 0;\r\n        let bSpecular = 0;\r\n        for (let n = 0; n < lights.length; n++) {\r\n            let light = lights[n];\r\n            let lightCenter = light.center;\r\n\r\n            subtractInPlace3(lightDirection, lightCenter, pointOfIntersection);\r\n            normalizeInPlace(lightDirection);\r\n\r\n            let normalDot = product3(normal, lightDirection);\r\n            let shadowed = false;\r\n            if (normalDot > 0) {\r\n                // Check if there's anything blocking the path to the light source\r\n                for (let m = 0; m < circles.length; m++) {\r\n                    if (circles[m].index === circle.index) {\r\n                        continue; // don't check intersection with the current circle\r\n                    }\r\n                    subtractInPlace3(shadowDirection, lightCenter, pointOfIntersection);\r\n                    let shadowT = intersect3(pointOfIntersection, shadowDirection, circles[m]);\r\n                    if (shadowT !== undefined && shadowT > 0) {\r\n                        shadowed = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (!shadowed) {\r\n                    rDiffuse += normalDot * circle.diffuse * light.diffuse.r;\r\n                    gDiffuse += normalDot * circle.diffuse * light.diffuse.g;\r\n                    bDiffuse += normalDot * circle.diffuse * light.diffuse.b;\r\n                }\r\n            }\r\n\r\n            scaleInPlace3(reflection, normal, 2*normalDot)\r\n            subtractInPlace3(reflection, reflection, lightDirection);\r\n\r\n            subtractInPlace3(viewDirection, camera, pointOfIntersection);\r\n            normalizeInPlace(viewDirection);\r\n\r\n            let reflectionDot = product3(viewDirection, reflection);\r\n            if (reflectionDot > 0 && !shadowed) {\r\n                rSpecular += Math.pow(reflectionDot, circle.shine) * circle.specular * light.specular.r;\r\n                gSpecular += Math.pow(reflectionDot, circle.shine) * circle.specular * light.specular.g;\r\n                bSpecular += Math.pow(reflectionDot, circle.shine) * circle.specular * light.specular.b;\r\n            }\r\n        }\r\n\r\n        let r = rAmbient + rDiffuse + rSpecular;\r\n        let g = gAmbient + gDiffuse + gSpecular;\r\n        let b = bAmbient + bDiffuse + bSpecular;\r\n\r\n        // convert 0-1 to 0-255 with clamping\r\n        r = clampValueToRange(Math.round(r * 255), 0, 255);\r\n        g = clampValueToRange(Math.round(g * 255), 0, 255);\r\n        b = clampValueToRange(Math.round(b * 255), 0, 255);\r\n    \r\n        let pixelOffset = 4 * (j * width + i);\r\n        imageData.data[pixelOffset] = r;\r\n        imageData.data[pixelOffset + 1] = g;\r\n        imageData.data[pixelOffset + 2] = b;\r\n        imageData.data[pixelOffset + 3] = 255;\r\n    }\r\n    tempTime = performance.now();\r\n    block3Time = roundToNPlaces(tempTime - prevTime, 3).toString();\r\n    prevTime = tempTime;\r\n\r\n    ctx.putImageData(imageData, 0, 0);\r\n\r\n    // ctx.fillStyle = \"white\";\r\n    // ctx.font = \"15px Arial\";\r\n    // ctx.textAlign = \"left\";\r\n    // ctx.fillText(block1Time, 0, 400);\r\n    // ctx.fillText(block2Time, 0, 450);\r\n    // ctx.fillText(block3Time, 0, 500);\r\n\r\n    previousTimeMillis = currentTimeMillis;\r\n\r\n    window.requestAnimationFrame(draw);\r\n}\r\n\r\nfunction mapLinear(fromStart: number, fromValue: number, fromEnd: number, toStart: number, toEnd: number) {\r\n    fromValue = clampValueToRange(fromValue, Math.min(fromStart, fromEnd), Math.max(fromStart, fromEnd));\r\n    let toValue = Math.abs(fromValue - fromStart) * Math.abs(toEnd - toStart) / Math.abs(fromEnd - fromStart);\r\n    if (toEnd > toStart) {\r\n        toValue = toValue + toStart;\r\n    } else {\r\n        toValue = -toValue + toStart;\r\n    }\r\n    return toValue;\r\n}\r\n\r\nfunction clampValueToRange(value: number, lowerBound: number, upperBound: number): number {\r\n    if (value < lowerBound) {\r\n        return lowerBound;\r\n    }\r\n    if (value > upperBound) {\r\n        return upperBound;\r\n    }\r\n    return value;\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
